}
# get that to 0-1 space
Source2[i] <- feedback[i]/9
# get the choice2
temp_c[i] <- SimpleBayes_f(bias, Source1[i], Source2[i])
# fixing the thing with the out of bounds choices
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
s_df <- tibble(trial = seq(ntrials), bias, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
# setup
ntrials <- 100
bias <- 0
w1 <- 0.8
w2 <- 0.8
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# make first choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it 0-1 scale
Source1[i] <- choice1[i]/9
# generate other choice
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){
diff_t[i] <- sample(diff, 1, replace=TRUE)
feedback[i] <- choice1[i] + diff_t[i]
}
# scale it
Source2[i] <- feedback[i]/9
# choice 2
temp_c[i] <- WeightedBayes_f(bias, Source1[i], Source2[i], w1, w2)
# make sure it's inside bounds
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
w_df <- tibble(trial = seq(ntrials), bias, w1, w2, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
View(w_df)
View(w_df)
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(
tidyverse,
brms,
cmdstanr,
patchwork
)
# simple bayes function
SimpleBayes_f <- function(bias, Source1, Source2){
outcome <- inv_logit_scaled(bias + 0.5*logit_scaled(Source1) + 0.5*logit_scaled(Source2))
return(outcome)
}
WeightedBayes_f <- function(bias, Source1, Source2, w1, w2){
outcome <- inv_logit_scaled(bias + w1*logit_scaled(Source1) + w2*logit_scaled(Source2))
return(outcome)
}
# setting up experimental loop
ntrials <- 100
bias <- 0
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# create random choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it on 0-1 space
Source1[i] <- choice1[i]/9
# create feedback information
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){ # while other choice out of scope
# sample a difference from choice1
diff_t[i] <- sample(diff, 1, replace=TRUE)
# make the other choice
feedback[i] <- choice1[i] + diff_t[i]
}
# get that to 0-1 space
Source2[i] <- feedback[i]/9
# get the choice2
temp_c[i] <- SimpleBayes_f(bias, Source1[i], Source2[i])
# fixing the thing with the out of bounds choices
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
s_df <- tibble(trial = seq(ntrials), bias, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
# setup
ntrials <- 100
bias <- 0
w1 <- 0.8
w2 <- 0.8
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# make first choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it 0-1 scale
Source1[i] <- choice1[i]/9
# generate other choice
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){
diff_t[i] <- sample(diff, 1, replace=TRUE)
feedback[i] <- choice1[i] + diff_t[i]
}
# scale it
Source2[i] <- feedback[i]/9
# choice 2
temp_c[i] <- WeightedBayes_f(bias, Source1[i], Source2[i], w1, w2)
# make sure it's inside bounds
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
w_df <- tibble(trial = seq(ntrials), bias, w1, w2, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
getwd()
setwd('C:\Users\kathr\OneDrive - Danmarks Tekniske Universitet\Lokale dokumenter\GitHub\assignment3_ACM')
setwd('\Users\kathr\OneDrive - Danmarks Tekniske Universitet\Lokale dokumenter\GitHub\assignment3_ACM')
setwd('\OneDrive - Danmarks Tekniske Universitet\Lokale dokumenter\GitHub\assignment3_ACM')
setwd('C:/Users/kathr/OneDrive - Danmarks Tekniske Universitet/Lokale dokumenter/GitHub/assignment3_ACM')
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
?set_cmdstan_path
pacman::p_load(
tidyverse,
brms,
cmdstanr,
patchwork
)
knitr::opts_chunk$set(echo = TRUE)
# simple bayes function
SimpleBayes_f <- function(bias, Source1, Source2){
outcome <- inv_logit_scaled(bias + 0.5*logit_scaled(Source1) + 0.5*logit_scaled(Source2))
return(outcome)
}
WeightedBayes_f <- function(bias, Source1, Source2, w1, w2){
outcome <- inv_logit_scaled(bias + w1*logit_scaled(Source1) + w2*logit_scaled(Source2))
return(outcome)
}
# setting up experimental loop
ntrials <- 100
bias <- 0
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# create random choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it on 0-1 space
Source1[i] <- choice1[i]/9
# create feedback information
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){ # while other choice out of scope
# sample a difference from choice1
diff_t[i] <- sample(diff, 1, replace=TRUE)
# make the other choice
feedback[i] <- choice1[i] + diff_t[i]
}
# get that to 0-1 space
Source2[i] <- feedback[i]/9
# get the choice2
temp_c[i] <- SimpleBayes_f(bias, Source1[i], Source2[i])
# fixing the thing with the out of bounds choices
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
s_df <- tibble(trial = seq(ntrials), bias, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
# setup
ntrials <- 100
bias <- 0
w1 <- 0.8
w2 <- 0.8
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# make first choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it 0-1 scale
Source1[i] <- choice1[i]/9
# generate other choice
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){
diff_t[i] <- sample(diff, 1, replace=TRUE)
feedback[i] <- choice1[i] + diff_t[i]
}
# scale it
Source2[i] <- feedback[i]/9
# choice 2
temp_c[i] <- WeightedBayes_f(bias, Source1[i], Source2[i], w1, w2)
# make sure it's inside bounds
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
w_df <- tibble(trial = seq(ntrials), bias, w1, w2, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(
tidyverse,
brms,
cmdstanr,
patchwork
)
# simple bayes function
SimpleBayes_f <- function(bias, Source1, Source2){
outcome <- inv_logit_scaled(bias + 0.5*logit_scaled(Source1) + 0.5*logit_scaled(Source2))
return(outcome)
}
WeightedBayes_f <- function(bias, Source1, Source2, w1, w2){
outcome <- inv_logit_scaled(bias + w1*logit_scaled(Source1) + w2*logit_scaled(Source2))
return(outcome)
}
# setting up experimental loop
ntrials <- 100
bias <- 0
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# create random choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it on 0-1 space
Source1[i] <- choice1[i]/9
# create feedback information
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){ # while other choice out of scope
# sample a difference from choice1
diff_t[i] <- sample(diff, 1, replace=TRUE)
# make the other choice
feedback[i] <- choice1[i] + diff_t[i]
}
# get that to 0-1 space
Source2[i] <- feedback[i]/9
# get the choice2
temp_c[i] <- SimpleBayes_f(bias, Source1[i], Source2[i])
# fixing the thing with the out of bounds choices
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
s_df <- tibble(trial = seq(ntrials), bias, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
# setup
ntrials <- 100
bias <- 0
w1 <- 0.8
w2 <- 0.8
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# make first choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it 0-1 scale
Source1[i] <- choice1[i]/9
# generate other choice
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){
diff_t[i] <- sample(diff, 1, replace=TRUE)
feedback[i] <- choice1[i] + diff_t[i]
}
# scale it
Source2[i] <- feedback[i]/9
# choice 2
temp_c[i] <- WeightedBayes_f(bias, Source1[i], Source2[i], w1, w2)
# make sure it's inside bounds
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
w_df <- tibble(trial = seq(ntrials), bias, w1, w2, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
knitr::opts_chunk$set(echo = TRUE)
path_to_stan_installation = "C:\Users\kathr\OneDrive - Danmarks Tekniske Universitet\.cmdstan\cmdstan-2.31.0"
knitr::opts_chunk$set(echo = TRUE)
path_to_stan_installation = "C:/Users/kathr/OneDrive - Danmarks Tekniske Universitet/.cmdstan/cmdstan-2.31.0"
pacman::p_load(
tidyverse,
brms,
cmdstanr,
patchwork
)
set_cmdstan_path(path_to_stan_installation)
# simple bayes function
SimpleBayes_f <- function(bias, Source1, Source2){
outcome <- inv_logit_scaled(bias + 0.5*logit_scaled(Source1) + 0.5*logit_scaled(Source2))
return(outcome)
}
WeightedBayes_f <- function(bias, Source1, Source2, w1, w2){
outcome <- inv_logit_scaled(bias + w1*logit_scaled(Source1) + w2*logit_scaled(Source2))
return(outcome)
}
# setting up experimental loop
ntrials <- 100
bias <- 0
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# create random choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it on 0-1 space
Source1[i] <- choice1[i]/9
# create feedback information
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){ # while other choice out of scope
# sample a difference from choice1
diff_t[i] <- sample(diff, 1, replace=TRUE)
# make the other choice
feedback[i] <- choice1[i] + diff_t[i]
}
# get that to 0-1 space
Source2[i] <- feedback[i]/9
# get the choice2
temp_c[i] <- SimpleBayes_f(bias, Source1[i], Source2[i])
# fixing the thing with the out of bounds choices
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
s_df <- tibble(trial = seq(ntrials), bias, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
# setup
ntrials <- 100
bias <- 0
w1 <- 0.8
w2 <- 0.8
rating <- c(1,2,3,4,5,6,7,8)
diff <- c(-3, -2, 0, 2, 3)
# saving info
Source1 <- array(NA, ntrials)
Source2 <- array(NA, ntrials)
diff_t <- array(NA, ntrials)
feedback <- array(NA, ntrials)
choice1 <- array(NA, ntrials)
choice2 <- array(NA, ntrials)
temp_c <- array(NA, ntrials)
for (i in 1:ntrials){
# make first choice
choice1[i] <- sample(rating, 1, replace=TRUE)
# make it 0-1 scale
Source1[i] <- choice1[i]/9
# generate other choice
feedback[i] <- 0
while (feedback[i] < 1 | feedback[i] > 8){
diff_t[i] <- sample(diff, 1, replace=TRUE)
feedback[i] <- choice1[i] + diff_t[i]
}
# scale it
Source2[i] <- feedback[i]/9
# choice 2
temp_c[i] <- WeightedBayes_f(bias, Source1[i], Source2[i], w1, w2)
# make sure it's inside bounds
choice2[i] <- ifelse(round(temp_c[i]*9,0) < 1, 1,
ifelse(round(temp_c[i]*9,0) > 8, 8,
round(temp_c[i]*9,0)))
}
w_df <- tibble(trial = seq(ntrials), bias, w1, w2, choice1, choice2, Source1, Source2,
feedback, diff_t, temp_c)
file <- file.path("weighted_bayes.stan")
mod_wb <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE),
stanc_options = list("O1"))
View(mod_wb)
View(mod_wb)
data_weightedBayes <- list(
N = nrow(w_df),
y = w_df$choice,
Source1 = w_df$Source1,
Source2 = w_df$Source2
)
samples_weighted <- mod_wb$sample(
data = data_weightedBayes,
seed = 123,
chains = 2,
parallel_chains = 2,
threads_per_chain = 2,
iter_warmup = 1500,
iter_sampling = 3000,
refresh = 500
)
data_weightedBayes <- list(
N = nrow(w_df),
choice = w_df$choice,
Source1 = w_df$Source1,
Source2 = w_df$Source2
)
samples_weighted <- mod_wb$sample(
data = data_weightedBayes,
seed = 123,
chains = 2,
parallel_chains = 2,
threads_per_chain = 2,
iter_warmup = 1500,
iter_sampling = 3000,
refresh = 500
)
w_df$choice1
w_df$choice
w_df$choice1
data_weightedBayes <- list(
N = nrow(w_df),
choice = w_df$choice1,
Source1 = w_df$Source1,
Source2 = w_df$Source2
)
samples_weighted <- mod_wb$sample(
data = data_weightedBayes,
seed = 123,
chains = 2,
parallel_chains = 2,
threads_per_chain = 2,
iter_warmup = 1500,
iter_sampling = 3000,
refresh = 500
)
nrow(w_df)
data_weightedBayes <- list(
N = nrow(w_df),
choice = w_df$choice1,
Source1 = w_df$Source1,
Source2 = w_df$Source2
)
samples_weighted <- mod_wb$sample(
data = data_weightedBayes,
seed = 123,
chains = 2,
parallel_chains = 2,
threads_per_chain = 2,
iter_warmup = 1500,
iter_sampling = 3000,
refresh = 500
)
